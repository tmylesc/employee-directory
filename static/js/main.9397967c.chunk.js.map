{"version":3,"sources":["components/Header/index.js","utils/EmployeesContext.js","components/Search/index.js","components/EmployeeGrid/index.js","utils/API.js","components/Employees/index.js","components/Main/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmployeesContext","React","createContext","Search","context","useContext","type","placeholder","aria-label","onChange","e","handleSearchChange","EmployeeGrid","id","axios","get","Employees","useState","users","order","filteredUsers","headings","name","width","developerState","setDeveloperState","useEffect","API","then","results","console","log","data","Provider","value","event","filter","target","filteredList","item","values","first","toLowerCase","last","indexOf","handleSort","heading","currentOrder","elem","map","toString","sortedUsers","sort","a","b","undefined","localeCompare","age","updatedHeadings","Main","Wrapper","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9397967c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1>Employee Directory</h1>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nconst EmployeesContext = React.createContext({});\r\n\r\nexport default EmployeesContext;","import React, { useContext } from \"react\";\r\nimport EmployeesContext from \"../../utils/EmployeesContext\";\r\n\r\nexport default function Search() {\r\n    const context = useContext(EmployeesContext);\r\n\r\n    return (\r\n        <div className=\"search-area\">\r\n            <div className=\"searchbox\">\r\n                <div className=\"input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\">\r\n                            Search\r\n                        </span>\r\n                    </div>\r\n                    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search Name\" aria-label=\"Search\" onChange={e => context.handleSearchChange(e)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport EmployeesContext from \"../../utils/EmployeesContext\";\r\n\r\nexport default function EmployeeGrid() {\r\n    const context = useContext(EmployeesContext);\r\n    return (\r\n        <div>\r\n            <table id=\"table\" className=\"table\">\r\n\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployees: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=100\");\r\n    }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport EmployeesContext from \"../../utils/EmployeesContext\";\r\nimport Search from \"../Search\";\r\nimport EmployeeGrid from \"../EmployeeGrid\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction Employees() {\r\n\r\n    const [developerState, setDeveloperState] = useState({\r\n        users: [],\r\n        order: \"descend\",\r\n        filteredUsers: [],\r\n        headings: [\r\n          { name: \"image\", width: \"10%\", order: \"descend\" },\r\n          { name: \"name\", width: \"10%\", order: \"descend\" },\r\n          { name: \"phone\", width: \"10%\", order: \"descend\" },\r\n          { name: \"email\", width: \"10%\", order: \"descend\" },\r\n          { name: \"dob\", width: \"10%\", order: \"descend\" }\r\n        ]\r\n      });\r\n\r\n      const handleSort = heading => {\r\n        let currentOrder = developerState.headings\r\n          .filter(elem => elem.name === heading)\r\n          .map(elem => elem.order)\r\n          .toString();\r\n    \r\n        if (currentOrder === \"descend\") {\r\n          currentOrder = \"ascend\";\r\n        } else {\r\n          currentOrder = \"descend\";\r\n        }\r\n    \r\n        const compare = (a, b) => {\r\n          if (currentOrder === \"ascend\") {\r\n            if (a[heading] === undefined) {\r\n              return 1;\r\n            } else if (b[heading] === undefined) {\r\n              return -1;\r\n            }\r\n            else if (heading === \"name\") {\r\n              return a[heading].first.localeCompare(b[heading].first);\r\n            } else if (heading === \"dob\") {\r\n              return a[heading].age - b[heading].age;\r\n            } else {\r\n              return a[heading].localeCompare(b[heading]);\r\n            }\r\n          } else {\r\n            if (a[heading] === undefined) {\r\n              return 1;\r\n            } else if (b[heading] === undefined) {\r\n              return -1;\r\n            }\r\n            else if (heading === \"name\") {\r\n              return b[heading].first.localeCompare(a[heading].first);\r\n            }else if (heading === \"dob\") {\r\n              return b[heading].age - a[heading].age;\r\n            }  else {\r\n              return b[heading].localeCompare(a[heading]);\r\n            }\r\n          }\r\n        };\r\n        const sortedUsers = developerState.filteredUsers.sort(compare);\r\n        const updatedHeadings = developerState.headings.map(elem => {\r\n          elem.order = elem.name === heading ? currentOrder : elem.order;\r\n          return elem;\r\n        });\r\n    \r\n        setDeveloperState({\r\n          ...developerState,\r\n          filteredUsers: sortedUsers,\r\n          headings: updatedHeadings\r\n        });\r\n      };\r\n\r\n      const handleSearchChange = event => {\r\n        const filter = event.target.value;\r\n        const filteredList = developerState.users.filter(item => {\r\n          let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\r\n          console.log(filter, values)\r\n        if(values.indexOf(filter.toLowerCase()) !== -1){\r\n          return item\r\n        };\r\n        });\r\n    \r\n        setDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n      };\r\n\r\n      useEffect(() => {\r\n        API.getEmployees().then(results => {\r\n          console.log(results.data.results);\r\n          setDeveloperState({\r\n            ...developerState,\r\n            users: results.data.results,\r\n            filteredUsers: results.data.results\r\n          });\r\n        });\r\n      }, []);   \r\n\r\n    return (\r\n        <EmployeesContext.Provider value={{ developerState, handleSearchChange, handleSort }}>\r\n            <Search />\r\n            <EmployeeGrid />\r\n        </EmployeesContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Employees;\r\n","import React from 'react';\r\nimport Employees from \"../Employees\";\r\n\r\nexport default function Main() {\r\n    return (\r\n        <div>\r\n            <Employees />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nfunction Wrapper({ children }) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            { children }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Wrapper from './components/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header />\n      <Main />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}